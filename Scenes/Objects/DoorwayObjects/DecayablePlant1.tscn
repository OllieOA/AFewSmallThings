[gd_scene load_steps=18 format=2]

[ext_resource path="res://Scenes/Objects/BaseObjects/DecayableItem.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/Doorway/DoorwayRoom_Plant1_Decay2.png" type="Texture" id=2]
[ext_resource path="res://Assets/Doorway/DoorwayRoom_Plant1_Decay1.png" type="Texture" id=3]
[ext_resource path="res://Assets/UI/PlantDeath.png" type="Texture" id=4]
[ext_resource path="res://Sounds/Watering.ogg" type="AudioStream" id=5]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;		//Flip coloring 90 degrees.

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;	//Use the outline_uv for coloring or not. Recomended not, but sometimes might be good.

uniform bool useTexture;		//Use a texture for the coloring
uniform sampler2D outlineTexture;	//This is the texture that will be used for coloring. Recomended to use a gradient texture, but I guess anything else works.

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				vec2 final_uv = use_outline_uv ? outline_uv : UV;	//get the UV we will be using, controlled via use_outline_uv
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a){
					if(!useTexture)	//If we're not using a texture
					{
						final_color = mix(outline_color, outline_color_2, flipColors ? final_uv.y : final_uv.x);
					}
					else
					{
						vec2 uv = flipColors ? vec2(final_uv.y, final_uv.x) : final_uv;
						vec4 outline = texture(outlineTexture, uv);
						
						final_color = outline;
					}
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 2 )
shader_param/intensity = 250
shader_param/precision = 0.02
shader_param/flipColors = false
shader_param/outline_color = Color( 0.921569, 0.0941176, 0.0941176, 1 )
shader_param/outline_color_2 = Color( 0.921569, 0.0941176, 0.0941176, 1 )
shader_param/use_outline_uv = false
shader_param/useTexture = false

[sub_resource type="StreamTexture" id=12]
resource_local_to_scene = true
load_path = "res://.import/AlertLevel2.png-2d0d982b8f69e1f9988a5556899f611b.stex"

[sub_resource type="ImageTexture" id=4]
resource_local_to_scene = true

[sub_resource type="RectangleShape2D" id=5]
resource_local_to_scene = true
extents = Vector2( 42, 31.5 )

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;		//Flip coloring 90 degrees.

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;	//Use the outline_uv for coloring or not. Recomended not, but sometimes might be good.

uniform bool useTexture;		//Use a texture for the coloring
uniform sampler2D outlineTexture;	//This is the texture that will be used for coloring. Recomended to use a gradient texture, but I guess anything else works.

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, outline_uv);
				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
					//We aren't a real color
					outline_sample = vec4(0);
				}
				
				vec2 final_uv = use_outline_uv ? outline_uv : UV;	//get the UV we will be using, controlled via use_outline_uv
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a){
					if(!useTexture)	//If we're not using a texture
					{
						final_color = mix(outline_color, outline_color_2, flipColors ? final_uv.y : final_uv.x);
					}
					else
					{
						vec2 uv = flipColors ? vec2(final_uv.y, final_uv.x) : final_uv;
						vec4 outline = texture(outlineTexture, uv);
						
						final_color = outline;
					}
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=14]
resource_local_to_scene = true
shader = SubResource( 13 )
shader_param/intensity = 250
shader_param/precision = 0.02
shader_param/flipColors = false
shader_param/outline_color = Color( 0.921569, 0.0941176, 0.0941176, 1 )
shader_param/outline_color_2 = Color( 0.921569, 0.0941176, 0.0941176, 1 )
shader_param/use_outline_uv = false
shader_param/useTexture = false

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 120, 48 )

[sub_resource type="AtlasTexture" id=7]
atlas = ExtResource( 4 )
region = Rect2( 120, 0, 120, 48 )

[sub_resource type="AtlasTexture" id=8]
atlas = ExtResource( 4 )
region = Rect2( 240, 0, 120, 48 )

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 4 )
region = Rect2( 360, 0, 120, 48 )

[sub_resource type="SpriteFrames" id=10]
resource_local_to_scene = true
animations = [ {
"frames": [ SubResource( 1 ), SubResource( 7 ), SubResource( 8 ), SubResource( 9 ) ],
"loop": true,
"name": "default",
"speed": 5.0
} ]

[node name="DecayablePlant1" instance=ExtResource( 1 )]
decay_texture_0 = ExtResource( 3 )
decay_texture_1 = ExtResource( 3 )
decay_texture_2 = ExtResource( 2 )
desired_inventory = 1

[node name="BaseSprite" parent="SelectableNodes" index="2"]
material = SubResource( 3 )

[node name="AlertSprite" parent="SelectableNodes" index="3"]
position = Vector2( 50, -48 )
texture = SubResource( 12 )

[node name="PlacematSprite" parent="SelectableNodes" index="4"]
texture = SubResource( 4 )

[node name="SelectBox" parent="SelectableNodes/SelectArea" index="0"]
position = Vector2( -3, 2.5 )
shape = SubResource( 5 )

[node name="SelectSound" parent="SelectableNodes" index="6"]
stream = ExtResource( 5 )

[node name="DecaySprite" parent="DecayableNodes" index="0"]
material = SubResource( 14 )

[node name="KillSprite" parent="DecayableNodes" index="1"]
position = Vector2( 0, -35 )
frames = SubResource( 10 )
